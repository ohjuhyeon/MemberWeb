- JSP 파일이 변경될 때마다 컨테이너는 자동으로 translation , compile, load, initialization 과정을 수행
- JSP 파일의 배포 환경(위치)은 HTML파일 위치와 동일

@Servlet과 JSP의 비교
1. Servlet은 Java코드에 HTML코드에 삽입하는 형태
 - out.println("<html><head> ...");
2. JSP는 HTML코드에 Java코드를 삽입하는 형태
 - <body> <% int data = 10; %> </body>
 
 @JSP Element 표기법
 1. 주석문 : <%-- 내용 -- %>
  
 2. 지시자 : <%@ 내용 %>
 			- 페이지에 대한 설정
 			- page, include
 			
 3. 선언문 : <%! 내용 %>
 		   : 변수 선언, 클래스 import 등
 		   
 4. 스크립틀릿 : <% Java Code %>
 			- 자바코드
 			
 5. 표현식 : <%= 출력내용 %>
 			-JSP에서 사용되는 변수값 표현
 
 @JSP 장점
 1. 서블릿보다 쉽고 , 작성하기 빠르다. 
 
 2. 디자인 부분 (HTML)과 로직부분(java)로 이루어져 있다.
   -디자인부분(HTML)과 로직부분(java)를 분리시킬 수 있다.
 	
 3. JSP도 Servlet이다. (JSP가 서블릿으로 변환후 실행)
   -프로그래머가 직접 코딩한 서블릿보다 최적화된 서블릿으로 생성시켜주므로 효율적인 코드가 만들어진다.
  	
 @ JSP 내장 객체
 -일반적인 java프로그램에서는 변수를 사용하기전에 반드시 선언을 해야하지만 JSP페이지에서는 선언을 하지 않고도 사용할 수 있는 변수가 있다.
  이러한 변수는 JSP페이지의 내장객체변수라 한다.
 
 -웹 컨테이너(=톰캣)가 JSP페이지를 Servlet클래스로 변환해줄 때 자동적으로 변수 선언을 해주기때문에 바로 사용가능
 
 변수이름 				역할 
request		: doGet, doPost 메소드의 첫번째 파라미터와 동일한 역할
response 	: doGet, doPost메소드의 두번째 파라미터와 동일한 역할
out 		: 웹 브라우저로 HTML코드를 출력해주는 기능 
session		: 여러 웹 컴포넌트들이 협력작업을 시작해서 끝내기까지의 기간.
application : JSP페이지가 속하는 웹 어플리케이션에 관련된 기능을 함
config : 	: JSP페이지가 속하는 웹 어플리케이션의 초기상태와 관련된 기능을 함

복습순서
1. URL 지정. (전체 회원정보를 요청할 url 만들기)
2. 만든 URL을 처리할 서블릿 작성( ***Servlet.java)
3. DB에서 데이터를 가져올 클래스 작성 (****Service, ***Dao)
4. view를 담당하는 jsp파일을 작성
3. 